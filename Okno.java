/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package com.mycompany.tawz_crawler;

import com.mycompany.tawz_crawler.pdf;
import java.io.IOException;
import java.util.ArrayList;
import java.io.FileNotFoundException;
import javax.swing.table.DefaultTableModel;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.select.Elements;

/**
 * This class represents the main window of the currency exchange rate
 * application. Implements fetching rates for EUR, USD, and GBP from different
 * sources.
 *
 * @author BMJargal
 * @since 1.0
 */
public class Okno extends javax.swing.JFrame
{

    /**
     * Creates new form Okno
     */
    public Okno()
    {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tablica = new javax.swing.JTable();
        Export = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton2.setText("EUR");
        jButton2.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("USD");
        jButton3.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("GBP");
        jButton4.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jButton4ActionPerformed(evt);
            }
        });

        Tablica.setAutoCreateRowSorter(true);
        Tablica.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][]
            {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String []
            {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(Tablica);

        Export.setText("Export to PDF");
        Export.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                ExportActionPerformed(evt);
            }
        });

        jTextField1.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        jTextField1.setText("Exchange rate ( profitable price )");
        jTextField1.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                jTextField1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(30, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton2)
                        .addGap(18, 18, 18)
                        .addComponent(jButton3)
                        .addGap(18, 18, 18)
                        .addComponent(jButton4)
                        .addGap(122, 122, 122)
                        .addComponent(Export)))
                .addGap(223, 223, 223))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton2)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(Export))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Action performed when the EUR button is clicked.
     *
     * @param evt The ActionEvent representing the button click event.
     */
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton2ActionPerformed
    {//GEN-HEADEREND:event_jButton2ActionPerformed
        Document EUR1;
        Document EUR2;
        ArrayList<Object> EURB = new ArrayList<>();
        EURB.add("EUR");
        ArrayList<Object> EURS = new ArrayList<>();
        EURS.add("EUR");
        java.util.Date dateTime = new java.util.Date();
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String formattedDateTime = sdf.format(dateTime);
        try
        {
            // fetching the target website             
            EUR1 = Jsoup.connect("http://kantor-zawisza.pl/").get();
            Elements EUR1B = EUR1.getElementsByClass("EUR-B");
            double a = Double.parseDouble(EUR1B.text());
            Elements EUR1S = EUR1.getElementsByClass("EUR-S");
            double b = Double.parseDouble(EUR1S.text());

            EUR2 = Jsoup.connect("https://dukatkantor.pl/").get();
            Elements EUR2B = EUR2.getElementsByClass("currency_element integence_EUR_buy_4");
            double x = Double.parseDouble(EUR2B.text());
            Elements EUR2S = EUR2.getElementsByClass("currency_element integence_EUR_sell_4");
            double y = Double.parseDouble(EUR2S.text());

            if (x <= a)
            {
                double printEURB = Math.floor(a * 1000) / 1000;
                EURB.add("Zawisza");
                EURB.add("Buy");
                EURB.add(printEURB + " PLN");
                EURB.add(formattedDateTime);
//                System.out.println("EUR Buy " + printEURB);
            } else
            {
                double printEURB = Math.floor(x * 1000) / 1000;
                EURB.add("Dukat");
                EURB.add("Buy");
                EURB.add(printEURB + " PLN");
                EURB.add(formattedDateTime);
//                System.out.println("EUR Buy " + printEURB);
            }
            if (y <= b)
            {
                double printEURS = Math.floor(y * 1000) / 1000;
                EURS.add("Dukat");
                EURS.add("Sell");
                EURS.add(printEURS + " PLN");
                EURS.add(formattedDateTime);
//                System.out.println("EUR Sell " + printEURS);
            } else
            {
                double printEURS = Math.floor(b * 1000) / 1000;
                EURS.add("Zawisza");
                EURS.add("Sell");
                EURS.add(printEURS + " PLN");
                EURS.add(formattedDateTime);
//                System.out.println("EUR Sell " + printEURS);
            }
            System.out.println(EURB + "  " + EURS);
//------------------------------------------------------------------------
            DefaultTableModel model = (DefaultTableModel) Tablica.getModel();
            // Clear the existing table content
            model.setRowCount(0);

            model.setColumnIdentifiers(new Object[]
            {
                "Walut", "Kantor", "Buy/Sell", "Value", "Date/Time"
            });

            // Adding data from EUR ArrayList to the JTable
            model.addRow(EURB.toArray());
            model.addRow(EURS.toArray());
        } catch (java.net.ConnectException e)
        {
            // Handle the connection timeout exception
            System.err.println("Connection timed out.");
            e.printStackTrace();
        } catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }//GEN-LAST:event_jButton2ActionPerformed
    /**
     * Action performed when the USD button is clicked.
     *
     * @param evt The ActionEvent representing the button click event.
     */
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton3ActionPerformed
    {//GEN-HEADEREND:event_jButton3ActionPerformed
        Document USD1;
        Document USD2;
        ArrayList<Object> USDB = new ArrayList<>();
        USDB.add("USD");
        ArrayList<Object> USDS = new ArrayList<>();
        USDS.add("USD");
        java.util.Date dateTime = new java.util.Date();
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String formattedDateTime = sdf.format(dateTime);
        try
        {
            // fetching the target website             
            USD1 = Jsoup.connect("http://kantor-zawisza.pl/").get();
            Elements USD1B = USD1.getElementsByClass("USD-B");
            double a = Double.parseDouble(USD1B.text());
            Elements USD1S = USD1.getElementsByClass("USD-S");
            double b = Double.parseDouble(USD1S.text());

            USD2 = Jsoup.connect("https://dukatkantor.pl/").get();
            Elements USD2B = USD2.getElementsByClass("currency_element integence_USD_buy_4");
            double x = Double.parseDouble(USD2B.text());
            Elements USD2S = USD2.getElementsByClass("currency_element integence_USD_sell_4");
            double y = Double.parseDouble(USD2S.text());
            if (x <= a)
            {
                double printUSDB = Math.floor(a * 1000) / 1000;
                USDB.add("Zawisza");
                USDB.add("Buy");
                USDB.add(printUSDB + " PLN");
                USDB.add(formattedDateTime);
//                System.out.println("USD Buy " + printUSDB);
            } else
            {
                double printUSDB = Math.floor(x * 1000) / 1000;
                USDB.add("Dukat");
                USDB.add("Buy");
                USDB.add(printUSDB + " PLN");
                USDB.add(formattedDateTime);
//                System.out.println("USD Buy " + printUSDB);
            }
            if (y <= b)
            {
                double printUSDS = Math.floor(y * 1000) / 1000;
                USDS.add("Dukat");
                USDS.add("Sell");
                USDS.add(printUSDS + " PLN");
                USDS.add(formattedDateTime);
//                System.out.println("USD Sell " + printUSDS);
            } else
            {
                double printUSDS = Math.floor(b * 1000) / 1000;
                USDS.add("Zawisza");
                USDS.add("Sell");
                USDS.add(printUSDS + " PLN");
                USDS.add(formattedDateTime);
//                System.out.println("USD Sell " + printUSDS);
            }
            System.out.println(USDB + "  " + USDS);
//------------------------------------------------------------------------
            DefaultTableModel model = (DefaultTableModel) Tablica.getModel();
            // Clear the existing table content
            model.setRowCount(0);

            model.setColumnIdentifiers(new Object[]
            {
                "Walut", "Kantor", "Buy/Sell", "Value", "Date/Time"
            });

            // Adding data from USD ArrayList to the JTable
            model.addRow(USDB.toArray());
            model.addRow(USDS.toArray());

        } catch (java.net.ConnectException e)
        {
            // Handle the connection timeout exception
            System.err.println("Connection timed out.");
            e.printStackTrace();
        } catch (IOException e)
        {
            throw new RuntimeException(e);
        }        // TODO add your handling code here:
    }//GEN-LAST:event_jButton3ActionPerformed
    /**
     * Action performed when the GBP button is clicked.
     *
     * @param evt The ActionEvent representing the button click event.
     */
    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButton4ActionPerformed
    {//GEN-HEADEREND:event_jButton4ActionPerformed

        Document GBP1;
        Document GBP2;
        ArrayList<Object> GBPB = new ArrayList<>();
        GBPB.add("GBP");
        ArrayList<Object> GBPS = new ArrayList<>();
        GBPS.add("GBP");
        java.util.Date dateTime = new java.util.Date();
        java.text.SimpleDateFormat sdf = new java.text.SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        String formattedDateTime = sdf.format(dateTime);
        try
        {
            // fetching the target website             
            GBP1 = Jsoup.connect("http://kantor-zawisza.pl/").get();
            Elements GBP1B = GBP1.getElementsByClass("GBP-B");
            double a = Double.parseDouble(GBP1B.text());
            Elements GBP1S = GBP1.getElementsByClass("GBP-S");
            double b = Double.parseDouble(GBP1S.text());

            GBP2 = Jsoup.connect("https://dukatkantor.pl/").get();
            Elements GBP2B = GBP2.getElementsByClass("currency_element integence_GBP_buy_4");
            double x = Double.parseDouble(GBP2B.text());
            Elements GBP2S = GBP2.getElementsByClass("currency_element integence_GBP_sell_4");
            double y = Double.parseDouble(GBP2S.text());

            if (x <= a)
            {
                double printGBPB = Math.floor(a * 1000) / 1000;
                GBPB.add("Zawisza");
                GBPB.add("Buy");
                GBPB.add(printGBPB + " PLN");
                GBPB.add(formattedDateTime);
//                System.out.println("GBP Buy " + printGBPB);
            } else
            {
                double printGBPB = Math.floor(x * 1000) / 1000;
                GBPB.add("Dukat");
                GBPB.add("Buy");
                GBPB.add(printGBPB + " PLN");
                GBPB.add(formattedDateTime);
//                System.out.println("GBP Buy " + printGBPB);
            }
            if (y <= b)
            {
                double printGBPS = Math.floor(y * 1000) / 1000;
                GBPS.add("Dukat");
                GBPS.add("Sell");
                GBPS.add(printGBPS + " PLN");
                GBPS.add(formattedDateTime);
//                System.out.println("GBP Sell " + printGBPS);
            } else
            {
                double printGBPS = Math.floor(b * 1000) / 1000;
                GBPS.add("Zawisza");
                GBPS.add("Sell");
                GBPS.add(printGBPS + " PLN");
                GBPS.add(formattedDateTime);
//                System.out.println("GBP Sell " + printGBPS);
            }
            System.out.println(GBPB + "  " + GBPS);
//------------------------------------------------------------------------
            DefaultTableModel model = (DefaultTableModel) Tablica.getModel();
            // Clear the existing table content
            model.setRowCount(0);

            model.setColumnIdentifiers(new Object[]
            {
                "Walut", "Kantor", "Buy/Sell", "Value", "Date/Time"
            });

            // Adding data from GBP ArrayList to the JTable
            model.addRow(GBPB.toArray());
            model.addRow(GBPS.toArray());
//            ------------------------------------------------------------
        } catch (java.net.ConnectException e)
        {
            // Handle the connection timeout exception
            System.err.println("Connection timed out.");
            e.printStackTrace();
        } catch (IOException e)
        {
            throw new RuntimeException(e);
        }
    }//GEN-LAST:event_jButton4ActionPerformed
    /**
     * Action performed when the Export to PDF button is clicked.
     *
     * @param evt The ActionEvent representing the button click event.
     */
    private void ExportActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_ExportActionPerformed
    {//GEN-HEADEREND:event_ExportActionPerformed
//        System.out.println(Tablica);
        try
        {
            pdf.printer(Tablica);
            System.out.println("PDF exported successfully");
        } catch (FileNotFoundException e)
        {
            System.err.println("Error exporting PDF: " + e.getMessage());
            e.printStackTrace();
        }
    }//GEN-LAST:event_ExportActionPerformed
    // ... (existing code)

    /**
     * Action performed when text is entered in the text field.
     *
     * @param evt The ActionEvent representing the text entry event.
     */
    private void jTextField1ActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jTextField1ActionPerformed
    {//GEN-HEADEREND:event_jTextField1ActionPerformed
        System.out.println("Text here");
    }//GEN-LAST:event_jTextField1ActionPerformed

    /**
     * Main method to start the application.
     *
     * @param args The command line arguments.
     */
    public static void main(String args[])
    {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try
        {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels())
            {
                if ("Nimbus".equals(info.getName()))
                {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex)
        {
            java.util.logging.Logger.getLogger(Okno.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex)
        {
            java.util.logging.Logger.getLogger(Okno.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex)
        {
            java.util.logging.Logger.getLogger(Okno.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex)
        {
            java.util.logging.Logger.getLogger(Okno.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable()
        {
            public void run()
            {
                new Okno().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Export;
    private javax.swing.JTable Tablica;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField jTextField1;
    // End of variables declaration//GEN-END:variables
}
